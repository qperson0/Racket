;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname |groupletterstogether quiz|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
(require picturing-programs)

#|I think that I am going to do this very similarly to how I tried to do the group together function.
I didnt get that one to fully work yet, but I think that it is the right way to do it. There are 2 helper functions, takesame 
and dropsame, and they are used in one last function called groupletterstogether|#

;pretty much nothing works

;Takes the letters if they are in the same half of the alphabet
;takesame:list(letter(s)) list(of letters) ---> list
(define(takesame lett list1)
  (cond [(empty? list1) (list )]
        [(equal? (string>=? "m" (first list1)) (string>=? "m" lett))
         (cons (first list1) (takesame lett (rest list1)))]
        [else (list )]))
(check-expect(takesame "a" (list )) empty)
(check-expect(takesame "a" (list "a")) (list "a"))
(check-expect(takesame "a" (list "a" "a" "b")) (list "a" "a"))
(check-expect(takesame "a" (list "b"))empty)
(check-expect(takesame "a" (list "a" "a" "a")) (list "a" "a" "a"))

;Drops all of the letters that are in the same half of the alphabet as the letter
;dropsame:string(letter) list(of letters)-->list
(define(dropsame let list1)
  (cond [(empty? list1)(list )]
        [(equal? "q" (first list1)) list1]
        [(equal? (string>=? "m" (first list1)) (string>=? "m" let))
         (dropsame let (rest list1))]
        [else list1]))

(check-expect(dropsame "a" (list )) empty)
(check-expect(dropsame "a" (list "a")) empty)
(check-expect(dropsame "a" (list "b" "a")) (list "b" "a"))
(check-expect(dropsame "a" (list "a" "a" "a" "b")) (list "b"))
(check-expect(dropsame "a" (list "b" "c" "a")) (list "b" "c" "a"))
(check-expect(dropsame "a" (list "b")) (list "b"))

;Puts all of the helper functions together, and puts each group of letters that is in the same 
;half of the alphabet together
;grouptogetherletters:
(define(groupletterstogether list)
  (cond [(empty? list) list]
        [else (cons (takesame (first (rest list))list) 
                    (groupletterstogether(dropsame (first (rest list))list)))]))

(check-expect(groupletterstogether (list "a")) (list (list "a")))
(check-expect(groupletterstogether (list "a" "a" "b")) (list (list "a" "a" "b")))
(check-expect(groupletterstogether (list "a" "m" "n")) (list (list "a" "m") (list "n")))
(check-expect(groupletterstogether (list "a" "q" "a" "q")) (list (list "a") (list "q") (list "a") (list "q")))
(check-expect(groupletterstogether (list "z" "x" "a")) (list (list "z" "x") (list "a")))